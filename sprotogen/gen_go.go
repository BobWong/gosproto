package main

import (
	"bytes"
	"fmt"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"os"
	"strings"
	"text/template"

	"github.com/davyxu/gosproto/meta"
)

const goCodeTemplate = `// Generated by github.com/davyxu/gosproto/sprotogen
// DO NOT EDIT!

package {{.PackageName}}

import (
	"reflect"
)

{{range $a, $enumobj := .Enums}}
type {{.Name}} int32
const (
	{{range .GoFields}}
	{{$enumobj.Name}}_{{.Name}} {{$enumobj.Name}} = {{.Tag}}
	{{end}}
)
{{end}}

{{range .Structs}}
type {{.Name}} struct{
	{{range .GoFields}}
		{{.FieldName}} {{.GoTypeName}} {{.GoTags}} 
	{{end}}
}
{{end}}

var SProtoStructs = []reflect.Type{
{{range .Structs}}
	reflect.TypeOf((*{{.Name}})(nil)).Elem(),
{{end}}
}

`

// 字段首字母大写
func publicFieldName(name string) string {
	return strings.ToUpper(string(name[0])) + name[1:]
}

type goFieldModel struct {
	*meta.FieldDescriptor
}

func (self *goFieldModel) FieldName() string {
	pname := publicFieldName(self.Name)

	// 碰到关键字在尾部加_
	if token.Lookup(pname).IsKeyword() {
		return pname + "_"
	}

	return pname
}

func (self *goFieldModel) GoTypeName() string {

	var b bytes.Buffer
	if self.Repeatd {
		b.WriteString("[]")
	}

	if self.Type == meta.FieldType_Struct {
		b.WriteString("*")
	}

	// 字段类型映射go的类型
	switch self.Type {
	case meta.FieldType_Integer:
		b.WriteString("int")
	case meta.FieldType_Struct,
		meta.FieldType_Enum:
		b.WriteString(self.Complex.Name)
	default:
		b.WriteString(self.Type.String())
	}

	return b.String()
}

func (self *goFieldModel) GoTags() string {

	var b bytes.Buffer

	b.WriteString("`sproto:\"")

	// 整形类型对解码层都视为整形
	switch self.Type {
	case meta.FieldType_Int32,
		meta.FieldType_Int64,
		meta.FieldType_UInt32,
		meta.FieldType_UInt64,
		meta.FieldType_Enum:
		b.WriteString("integer")
	default:
		b.WriteString(self.Kind())
	}

	b.WriteString(",")

	b.WriteString(fmt.Sprintf("%d", self.Tag))
	b.WriteString(",")

	if self.Repeatd {
		b.WriteString("array,")
	}

	b.WriteString(fmt.Sprintf("name=%s", self.FieldName()))

	b.WriteString("\"`")

	return b.String()
}

type goStructModel struct {
	*meta.Descriptor

	GoFields []goFieldModel
}

type goFileModel struct {
	*meta.FileDescriptor

	Structs []*goStructModel

	Enums []*goStructModel

	PackageName string
}

func addGoStruct(descs []*meta.Descriptor, callback func(*goStructModel)) {

	for _, st := range descs {

		stModel := &goStructModel{
			Descriptor: st,
		}

		for _, fd := range st.Fields {

			fdModel := goFieldModel{
				FieldDescriptor: fd,
			}

			stModel.GoFields = append(stModel.GoFields, fdModel)

		}

		callback(stModel)

	}
}

func gen_go(fileD *meta.FileDescriptor, packageName, filename string) {

	tpl, err := template.New("sproto_go").Parse(goCodeTemplate)
	if err != nil {
		fmt.Println("template error ", err.Error())
		os.Exit(1)
	}

	fm := &goFileModel{
		FileDescriptor: fileD,
		PackageName:    packageName,
	}

	addGoStruct(fileD.Structs, func(stModel *goStructModel) {
		fm.Structs = append(fm.Structs, stModel)
	})

	addGoStruct(fileD.Enums, func(stModel *goStructModel) {
		fm.Enums = append(fm.Enums, stModel)
	})

	var bf bytes.Buffer

	err = tpl.Execute(&bf, fm)
	if err != nil {
		fmt.Println("template error ", err.Error())
		os.Exit(1)
	}

	err = formatCode(&bf)

	if err != nil {
		fmt.Println("format error ", err.Error())
	}

	if fileErr := ioutil.WriteFile(filename, bf.Bytes(), 666); fileErr != nil {
		fmt.Println("write file error ", fileErr.Error())
		os.Exit(1)
	}
}

// Reformat generated code.
func formatCode(bf *bytes.Buffer) error {

	fset := token.NewFileSet()

	ast, err := parser.ParseFile(fset, "", bf, parser.ParseComments)
	if err != nil {
		return err
	}

	bf.Reset()

	err = (&printer.Config{Mode: printer.TabIndent | printer.UseSpaces, Tabwidth: 8}).Fprint(bf, fset, ast)
	if err != nil {
		return err
	}

	return nil
}
