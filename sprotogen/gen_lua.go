package main

import "github.com/davyxu/gosproto/meta"

const luaCodeTemplate = `-- Generated by github.com/davyxu/gosproto/sprotogen
-- DO NOT EDIT!

-- Enum:
--[[
{{range $a, $enumObj := .Enums}}
-- {{$enumObj.Name}} {{range .Fields}}	
local {{$enumObj.Name}}_{{.Name}} = {{.Tag}} {{end}}
{{end}}
]]

local sproto = {
	Schema = [[
{{range .Structs}}
.{{.Name}} {	{{range .LuaFields}}	
	{{.Name}} {{.Tag}} : {{.CompatibleTypeName}} {{end}}
}
{{end}}
	]],

	NameByID = { {{range .Structs}}
		[{{.MsgID}}] = "{{.Name}}",{{end}}
	},
	
	IDByName = {},
}

local t = sproto.IDByName
for k, v in pairs(sproto.NameByID) do
	t[v] = k
end

return sproto

`

type luaFieldModel struct {
	*meta.FieldDescriptor
}

type luaStructModel struct {
	*meta.Descriptor

	f *luaFileModel

	LuaFields []luaFieldModel
}

func (self *luaStructModel) MsgID() uint32 {
	return StringHash(self.f.PackageName + "." + self.Name)
}

type luaFileModel struct {
	*meta.FileDescriptor

	Structs []*luaStructModel

	Enums []*luaStructModel

	PackageName string
}

func addLuaStruct(descs []*meta.Descriptor, callback func(*luaStructModel)) {

	for _, st := range descs {

		stModel := &luaStructModel{
			Descriptor: st,
		}

		for _, fd := range st.Fields {

			fdModel := luaFieldModel{
				FieldDescriptor: fd,
			}

			stModel.LuaFields = append(stModel.LuaFields, fdModel)

		}

		callback(stModel)

	}
}

func gen_lua(fileD *meta.FileDescriptor, packageName, filename string) {

	fm := &luaFileModel{
		FileDescriptor: fileD,
		PackageName:    packageName,
	}

	addLuaStruct(fileD.Structs, func(stModel *luaStructModel) {
		stModel.f = fm
		fm.Structs = append(fm.Structs, stModel)
	})

	addLuaStruct(fileD.Enums, func(stModel *luaStructModel) {
		stModel.f = fm
		fm.Enums = append(fm.Enums, stModel)
	})

	generateCode("sp->lua", luaCodeTemplate, filename, fm, nil)

}
