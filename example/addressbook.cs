// Generated by github.com/davyxu/gosproto/sprotogen
// DO NOT EDIT!
using System;
using Sproto;
using System.Collections.Generic;

namespace example
{

	enum MyCar {
		
		Monkey = 1;
		
		Monk = 2;
		
		Pig = 3;
		
	}



	public class AddressBook : SprotoTypeBase {
		private static int max_field_count = 1;
		
		
		private List<Person> _person; // tag 0
		public List<Person> person {
			get{ return _person; }
			set{ base.has_field.set_field(0,true); _person = value; }
		}
		public bool HasPerson{
			get { return base.has_field.has_field(0); }
		}
		
		
		public AddressBook() : base(max_field_count) {}
		
		public AddressBook(byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}
		
		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				
				case 0:
					this.person = base.deserialize.read_obj_list<Person>();
					break;
				
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}
		
		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			
			if (base.has_field.has_field (0)) {
				base.serialize.write_obj(this.person, 0);
			}
			

			return base.serialize.close ();
		}
	}

	public class MyData : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _name; // tag 0
		public string name {
			get{ return _name; }
			set{ base.has_field.set_field(0,true); _name = value; }
		}
		public bool HasName{
			get { return base.has_field.has_field(0); }
		}
		
		private unknown _type; // tag 1
		public unknown type {
			get{ return _type; }
			set{ base.has_field.set_field(1,true); _type = value; }
		}
		public bool HasType{
			get { return base.has_field.has_field(1); }
		}
		
		private Int32 _int32; // tag 2
		public Int32 int32 {
			get{ return _int32; }
			set{ base.has_field.set_field(2,true); _int32 = value; }
		}
		public bool HasInt32{
			get { return base.has_field.has_field(2); }
		}
		
		
		public MyData() : base(max_field_count) {}
		
		public MyData(byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}
		
		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				
				case 0:
					this.name = base.deserialize.read_string();
					break;
				
				case 1:
					this.type = base.deserialize.read_unknown();
					break;
				
				case 2:
					this.int32 = base.deserialize.read_int32();
					break;
				
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}
		
		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			
			if (base.has_field.has_field (0)) {
				base.serialize.write_string(this.name, 0);
			}
			
			if (base.has_field.has_field (1)) {
				base.serialize.write_unknown(this.type, 1);
			}
			
			if (base.has_field.has_field (2)) {
				base.serialize.write_int32(this.int32, 2);
			}
			

			return base.serialize.close ();
		}
	}

	public class MyProfile : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private MyData _nameField; // tag 1
		public MyData nameField {
			get{ return _nameField; }
			set{ base.has_field.set_field(0,true); _nameField = value; }
		}
		public bool HasNameField{
			get { return base.has_field.has_field(0); }
		}
		
		private List<MyData> _nameArray; // tag 2
		public List<MyData> nameArray {
			get{ return _nameArray; }
			set{ base.has_field.set_field(1,true); _nameArray = value; }
		}
		public bool HasNameArray{
			get { return base.has_field.has_field(1); }
		}
		
		private Dictionary<unknown,MyData> _nameMap; // tag 3
		public Dictionary<unknown,MyData> nameMap {
			get{ return _nameMap; }
			set{ base.has_field.set_field(2,true); _nameMap = value; }
		}
		public bool HasNameMap{
			get { return base.has_field.has_field(2); }
		}
		
		
		public MyProfile() : base(max_field_count) {}
		
		public MyProfile(byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}
		
		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				
				case 1:
					this.nameField = base.deserialize.read_obj<MyData>();
					break;
				
				case 2:
					this.nameArray = base.deserialize.read_obj_list<MyData>();
					break;
				
				case 3:
					this.nameMap = base.deserialize.read_map<unknown,MyData>(v => v.type);
					break;
				
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}
		
		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			
			if (base.has_field.has_field (0)) {
				base.serialize.write_obj(this.nameField, 1);
			}
			
			if (base.has_field.has_field (1)) {
				base.serialize.write_obj(this.nameArray, 2);
			}
			
			if (base.has_field.has_field (2)) {
				base.serialize.write_obj(this.nameMap, 3);
			}
			

			return base.serialize.close ();
		}
	}

	public class Person : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private string _name; // tag 0
		public string name {
			get{ return _name; }
			set{ base.has_field.set_field(0,true); _name = value; }
		}
		public bool HasName{
			get { return base.has_field.has_field(0); }
		}
		
		private Int32 _id; // tag 1
		public Int32 id {
			get{ return _id; }
			set{ base.has_field.set_field(1,true); _id = value; }
		}
		public bool HasId{
			get { return base.has_field.has_field(1); }
		}
		
		private string _email; // tag 2
		public string email {
			get{ return _email; }
			set{ base.has_field.set_field(2,true); _email = value; }
		}
		public bool HasEmail{
			get { return base.has_field.has_field(2); }
		}
		
		private List<PhoneNumber> _phone; // tag 3
		public List<PhoneNumber> phone {
			get{ return _phone; }
			set{ base.has_field.set_field(3,true); _phone = value; }
		}
		public bool HasPhone{
			get { return base.has_field.has_field(3); }
		}
		
		
		public Person() : base(max_field_count) {}
		
		public Person(byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}
		
		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				
				case 0:
					this.name = base.deserialize.read_string();
					break;
				
				case 1:
					this.id = base.deserialize.read_int32();
					break;
				
				case 2:
					this.email = base.deserialize.read_string();
					break;
				
				case 3:
					this.phone = base.deserialize.read_obj_list<PhoneNumber>();
					break;
				
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}
		
		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			
			if (base.has_field.has_field (0)) {
				base.serialize.write_string(this.name, 0);
			}
			
			if (base.has_field.has_field (1)) {
				base.serialize.write_int32(this.id, 1);
			}
			
			if (base.has_field.has_field (2)) {
				base.serialize.write_string(this.email, 2);
			}
			
			if (base.has_field.has_field (3)) {
				base.serialize.write_obj(this.phone, 3);
			}
			

			return base.serialize.close ();
		}
	}

	public class PhoneNumber : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private string _number; // tag 0
		public string number {
			get{ return _number; }
			set{ base.has_field.set_field(0,true); _number = value; }
		}
		public bool HasNumber{
			get { return base.has_field.has_field(0); }
		}
		
		private Int32 _type; // tag 1
		public Int32 type {
			get{ return _type; }
			set{ base.has_field.set_field(1,true); _type = value; }
		}
		public bool HasType{
			get { return base.has_field.has_field(1); }
		}
		
		
		public PhoneNumber() : base(max_field_count) {}
		
		public PhoneNumber(byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}
		
		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				
				case 0:
					this.number = base.deserialize.read_string();
					break;
				
				case 1:
					this.type = base.deserialize.read_int32();
					break;
				
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}
		
		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			
			if (base.has_field.has_field (0)) {
				base.serialize.write_string(this.number, 0);
			}
			
			if (base.has_field.has_field (1)) {
				base.serialize.write_int32(this.type, 1);
			}
			

			return base.serialize.close ();
		}
	}


}
